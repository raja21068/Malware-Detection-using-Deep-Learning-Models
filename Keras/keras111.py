#Predicting Wine Types: Red or White
# use the wine quality data set that you can find in the wine quality data set
# 1)Fixed acidity 2) Volatile acidity 3)Residual suga 4)Chlorides  5)Free sulfur dioxide
#  6)Total sulfur dioxide 8)Density  9) ph 11) Alcohol: 12)Quality
#   etc
# these columns check the wine quailty

import pandas as pd

#------------Loading the data
# Read in white wine data
white = pd.read_csv("data/winequality-white.csv", sep=';')

# Read in red wine data
red = pd.read_csv("data/winequality-red.csv", sep=';')


# Print info on white wine
#print(white.info())

# Print info on red wine
#print(red.info())

#Cleaning the data if there is any null value
# First rows of `red`
red.head()

# Last rows of `white`
white.tail()

# Take a sample of 5 rows of `red`
red.sample(5)

# Describe `white`
white.describe()

# Double check for null values in `red`
pd.isnull(red)

# Visualizing The Data
import matplotlib.pyplot as plt

#As you can see in the image below, you see that the alcohol levels between the red and white wine are mostly the same:
#  they have around 9% of alcohol.
# Of course, there are also a considerable amount of observations that have 10% or 11% of alcohol percentage.
fig, ax = plt.subplots(1, 2)

ax[0].hist(red.alcohol, 10, facecolor='red', alpha=0.5, label="Red wine")
ax[1].hist(white.alcohol, 10, facecolor='white', ec="black", lw=0.5, alpha=0.5, label="White wine")

#fig.subplots_adjust(left=0, right=1, bottom=0, top=0.5, hspace=0.05, wspace=1)
ax[0].set_ylim([0, 1000])
ax[0].set_xlabel("Alcohol in % Vol")
ax[0].set_ylabel("Frequency")
ax[1].set_xlabel("Alcohol in % Vol")
ax[1].set_ylabel("Frequency")
#ax[0].legend(loc='best')
#ax[1].legend(loc='best')
fig.suptitle("Distribution of Alcohol in % Vol")

plt.show()

#double Check
import numpy as np
print(np.histogram(red.alcohol, bins=[7,8,9,10,11,12,13,14,15]))
print(np.histogram(white.alcohol, bins=[7,8,9,10,11,12,13,14,15]))


# check the quaility of wine
#As you can see in the image below, the red wine seems to contain more sulphates than the white wine,
#  which has less sulphates above 1 g/dm3dm3. For the white wine,
# there only seem to be a couple of exceptions that fall just above 1 g/dm3dm3, while this is definitely more for the red wines.
# This could maybe explain the general saying that red wine causes headaches, but what about the quality

#Of course, you need to take into account that the difference in observations could also affect the graphs and how you might interpret them.
import matplotlib.pyplot as plt

fig, ax = plt.subplots(1, 2, figsize=(8, 4))

ax[0].scatter(red['quality'], red["sulphates"], color="red")
ax[1].scatter(white['quality'], white['sulphates'], color="white", edgecolors="black", lw=0.5)

ax[0].set_title("Red Wine")
ax[1].set_title("White Wine")
ax[0].set_xlabel("Quality")
ax[1].set_xlabel("Quality")
ax[0].set_ylabel("Sulphates")
ax[1].set_ylabel("Sulphates")
ax[0].set_xlim([0,10])
ax[1].set_xlim([0,10])
ax[0].set_ylim([0,2.5])
ax[1].set_ylim([0,2.5])
fig.subplots_adjust(wspace=0.5)
fig.suptitle("Wine Quality by Amount of Sulphates")

plt.show()




#Let’s put the data to the test and make a scatter plot that plots the alcohol versus the volatile acidity.
#  The data points should be colored according to their rating or quality label:


#In the image above, you see that the levels that you have read about above especially hold for the white wine:
#  most wines with label 8 have volatile acidity levels of 0.5 or below,
#  but whether or not it has an effect on the quality is too difficult to say,
# since all the data points are very densely packed towards one side of the graph.


import matplotlib.pyplot as plt
import numpy as np

np.random.seed(570)

redlabels = np.unique(red['quality'])
whitelabels = np.unique(white['quality'])

import matplotlib.pyplot as plt

fig, ax = plt.subplots(1, 2, figsize=(8, 4))
redcolors = np.random.rand(6, 4)
whitecolors = np.append(redcolors, np.random.rand(1, 4), axis=0)

for i in range(len(redcolors)):
    redy = red['alcohol'][red.quality == redlabels[i]]
    redx = red['volatile acidity'][red.quality == redlabels[i]]
    ax[0].scatter(redx, redy, c=redcolors[i])
for i in range(len(whitecolors)):
    whitey = white['alcohol'][white.quality == whitelabels[i]]
    whitex = white['volatile acidity'][white.quality == whitelabels[i]]
    ax[1].scatter(whitex, whitey, c=whitecolors[i])

ax[0].set_title("Red Wine")
ax[1].set_title("White Wine")
ax[0].set_xlim([0, 1.7])
ax[1].set_xlim([0, 1.7])
ax[0].set_ylim([5, 15.5])
ax[1].set_ylim([5, 15.5])
ax[0].set_xlabel("Volatile Acidity")
ax[0].set_ylabel("Alcohol")
ax[1].set_xlabel("Volatile Acidity")
ax[1].set_ylabel("Alcohol")
# ax[0].legend(redlabels, loc='best', bbox_to_anchor=(1.3, 1))
ax[1].legend(whitelabels, loc='best', bbox_to_anchor=(1.3, 1))
# fig.suptitle("Alcohol - Volatile Acidity")
fig.subplots_adjust(top=0.85, wspace=0.7)

plt.show()



# Preprocess Data

# Add `type` column to `red` with value 1
red['type'] = 1

# Add `type` column to `white` with value 0
white['type'] = 0

# Append `white` to `red`
wines = red.append(white, ignore_index=True)

#Since it can be somewhat difficult to interpret graphs,
# it’s also a good idea to plot a correlation matrix. This will give insights more quickly about which variables correlate:

#import seaborn as sns
#corr = wines.corr()
#sns.heatmap(corr,xticklabels=corr.columns.values, yticklabels=corr.columns.values)

#sns.plt.show()

#Train and Test Sets

# Import `train_test_split` from `sklearn.model_selection`
from sklearn.model_selection import train_test_split

# Specify the data
X=wines.ix[:,0:11]

# Specify the target labels and flatten the array
y= np.ravel(wines.type)

# Split the data up in train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

#------------------Standardize The Data-------------------

# Import `StandardScaler` from `sklearn.preprocessing`
from sklearn.preprocessing import StandardScaler

# Define the scaler
scaler = StandardScaler().fit(X_train)

# Scale the train set
X_train = scaler.transform(X_train)

# Scale the test set
X_test = scaler.transform(X_test)


#-------------Model Data----------------------
#Before you start modelling, go back to your original question:
#  can you predict whether a wine is red or white by looking at its chemical properties, such as volatile acidity or sulphates?
# Import `Sequential` from `keras.models`
from keras.models import Sequential

# Import `Dense` from `keras.layers`
from keras.layers import Dense

# Initialize the constructor
model = Sequential()

# Add an input layer
model.add(Dense(12, activation='relu', input_shape=(11,)))

# Add one hidden layer
model.add(Dense(8, activation='relu'))

# Add an output layer
model.add(Dense(1, activation='sigmoid'))

# Model output shape
model.output_shape

# Model summary
model.summary()

# Model config
model.get_config()

# List all weight tensors
model.get_weights()
#----------Compile and Fit-----------------
model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

model.fit(X_train, y_train,epochs=20, batch_size=1, verbose=1)




